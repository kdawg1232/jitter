---
description: 
globs: 
alwaysApply: true
---
---
description: global rules for the entire project
---
### üîÑ Project Awareness & Context
- **Always read `PLANNING.md`** at the start of a new conversation to understand the project's architecture, goals, style, and constraints.
- **Check `TASKS.md`** before starting a new task. If the task isn‚Äôt listed, add it with a brief description and today's date.
- **Check DATABASE.sql whenever you think you need to do database implementation. The database might already exists. Change this file each time you have to make a change. 
- **Use consistent naming conventions, file structure, and architecture patterns** as described in `PLANNING.md`.
- Make sure you look at supabase.ts in order to get a better view of this project if necessary. 
- We are using our own custom authentication and custom Supabase client. Make sure you use those methods.The project is using a custom Supabase REST client implementation (in supabase.ts) that has a specific way of chaining query operations. 


### üß± Code Structure & Modularity
- **Never create a file longer than 500 lines of code.** If a file approaches this limit, refactor by splitting it into modules or helper files.
- **Organize code into clearly separated modules**, grouped by feature or responsibility.
- **Use clear, consistent imports** (prefer relative imports within packages).
- **Take into account if the file you are creating is frontend or backend, put the file in the respective folders
- Don't Do QUICK FIXES! Create fixes that will help the project in the long run.


### ‚úÖ Task Completion
- **Mark completed tasks in `TASKS.md`** immediately after finishing them.
- Add new sub-tasks or TODOs discovered during development to `TASKS.md` under a ‚ÄúDiscovered During Work‚Äù section.


### üìö Documentation & Explainability
- **Update `README.md`** when new features are added, dependencies change, or setup steps are modified.
- **Comment non-obvious code** and ensure everything is understandable to a mid-level developer.
- When writing complex logic, **add an inline `# Reason:` comment** explaining the why, not just the what.
- Change the database files whenever we need to alter the sql for the databases. Have sql for one table for each file. 

### Comments
- ALWAYS try to add more helpful and explanatory comments into our code
- NEVER delete old comments - unless they are obviously wrong / obsolete
- Include LOTS of explanatory comments in your code. ALWAYS write well-documented code.
- Document all changes and their reasoning IN THE COMMENTS YOU WRITE
- when writing comments, use clear and easy-to-understand language and write in short sentences.


### üß† AI Behavior Rules
- **Never assume missing context. Ask questions if uncertain.**
- **Always confirm file paths and module names** exist before referencing them in code or tests.
- **Never delete or overwrite existing code** unless explicitly instructed to or if part of a task from `TASKS.md`.
